name: Docker Image CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  create:
    tags:
    
concurrency: ci-${{ github.ref }}

  #schedule:
    # * is a special character in YAML so you have to quote this string
   # - cron:  '0 */6 * * *'
    
env:
  # Use docker.io for Docker Hub if empty
  REGISTRY: ghcr.io
  # github.repository as <account>/<repo>
  IMAGE_NAME: ${{ github.repository }}
  IMAGE_NAME_GHCR: ghcr.io/${{ github.repository }}
  IMAGE_NAME_DOCKER: austinsonger/elastic-detection-clivv

permissions:
  contents: read
  packages: write



jobs:

  build_release:
    name: Build and Release
    runs-on: ubuntu-latest

    outputs:
      labels: ${{ steps.meta.outputs.labels }}
      tags: ${{ steps.meta.outputs.tags }}

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
    
    - uses: docker/setup-buildx-action@v1
      id: buildx
      with:
        install: true          

      # Login against a Docker registry except on PR

    - name: Login to GitHub Container Registry ${{ env.REGISTRY }}
      uses: docker/login-action@v1
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.repository_owner }}
        password: ${{ secrets.GH_TOKEN }}

    - name: Login to DockerHub
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Relase Prepare for latest Tag
      id: releasePrepareLatestTag
      shell: bash
      run: |
        if [[ "$GITHUB_EVENT_NAME" == "create" ]] && [[ "$GITHUB_REF" =~ ^refs/tags/v.* ]]; then
          echo -n "::set-output name=latest::true"
         else
           echo -n "::set-output name=latest::false"
         fi
    - name: Relase Prepare
      id: releasePrepare
      run: |
        echo -n "::set-output name=images::"
        if [ "${GITHUB_EVENT_NAME}" != "pull_request" ]; then
          echo -n "${IMAGE_NAME_DOCKER}"
          echo -n ","
        fi
        echo -n "${IMAGE_NAME_GHCR}"


      # Extract metadata (tags, labels) for Docker
    - name: Extract Docker metadata
      id: meta2
      uses: docker/metadata-action@v3
      with:
        github-token: ${{ secrets.GH_TOKEN }}
        images: ${{ steps.releasePrepare.outputs.images }}
        flavor: |
          latest=${{ steps.releasePrepareLatestTag.outputs.latest}}
          prefix=
          suffix=
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{raw}}
          type=semver,pattern={{major}}.{{minor}}

      # Build and push Docker image with Buildx (don't push on PR)
    - name: Build and push Docker image
      uses: docker/build-push-action@v2
      with:
        context: .
        push: true
        tags: ${{ steps.meta2.outputs.tags }}
        labels: ${{ steps.meta2.outputs.labels }}


      # Extract metadata (tags, labels) for Docker
    - name: Extract Docker metadata
      id: meta3
      uses: docker/metadata-action@v3
      with:
        github-token: ${{ secrets.GH_TOKEN }}
        images: ${{ steps.releasePrepare.outputs.images }}
        flavor: |
          latest=${{ steps.releasePrepareLatestTag.outputs.latest}}
          onlatest=${{ steps.releasePrepareLatestTag.outputs.latest}}
          prefix=
          suffix=-full,onlatest=${{ steps.releasePrepareLatestTag.outputs.latest}}
        tags: |
          type=ref,event=branch
          type=ref,event=tag
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{raw}}
          type=semver,pattern={{major}}.{{minor}}



      # Build and push Docker image with Buildx (don't push on PR)
    - name: Build and push Docker image -full tag
      uses: docker/build-push-action@v2
      with:
        context: .
        push: true
        tags: ${{ steps.meta3.outputs.tags }}
        labels: ${{ steps.meta3.outputs.labels }}



      # Extract metadata (tags, labels) for Docker
    - name: Extract Docker metadata
      id: meta4
      uses: docker/metadata-action@v3
      with:
        github-token: ${{ secrets.GH_TOKEN }}
        images: ${{ steps.releasePrepare.outputs.images }}
        flavor: |
          latest=${{ steps.releasePrepareLatestTag.outputs.latest}}
          onlatest=${{ steps.releasePrepareLatestTag.outputs.latest}}
          prefix=
          suffix=-data,onlatest=${{ steps.releasePrepareLatestTag.outputs.latest}}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{raw}}
          type=semver,pattern={{major}}.{{minor}}


      # Build and push Docker image with Buildx (don't push on PR)
    - name: Build and push Docker image with -data tag
      uses: docker/build-push-action@v2
      with:
        context: .
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta4.outputs.tags }}
        labels: ${{ steps.meta4.outputs.labels }}



      # Extract metadata (tags, labels) for Docker
    - name: Extract Docker metadata
      id: meta5
      uses: docker/metadata-action@v3
      with:
        github-token: ${{ secrets.GH_TOKEN }}
        images: ${{ steps.releasePrepare.outputs.images }}
        flavor: |
          latest=${{ steps.releasePrepareLatestTag.outputs.latest}}
          onlatest=${{ steps.releasePrepareLatestTag.outputs.latest}}
          prefix=
          suffix=-data-full,onlatest=${{ steps.releasePrepareLatestTag.outputs.latest}}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{raw}}
          type=semver,pattern={{major}}.{{minor}}


      # Build and push Docker image with Buildx (don't push on PR)
    - name: Build and push Docker image with -data-full tag
      uses: docker/build-push-action@v2
      with:
        context: .
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta5.outputs.tags }}
        labels: ${{ steps.meta5.outputs.labels }}

